<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | One Broken Pixel]]></title>
  <link href="http://rieya-uc.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://rieya-uc.github.io/"/>
  <updated>2014-06-25T22:01:08+01:00</updated>
  <id>http://rieya-uc.github.io/</id>
  <author>
    <name><![CDATA[Rieya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dodge and Shoot]]></title>
    <link href="http://rieya-uc.github.io/blog/2014/06/25/dodge-and-shoot/"/>
    <updated>2014-06-25T13:55:45+01:00</updated>
    <id>http://rieya-uc.github.io/blog/2014/06/25/dodge-and-shoot</id>
    <content type="html"><![CDATA[<p>For this demo I decided I wanted to do something a little longer. See how many monsters you can kill before you succumb to the inevitable.</p>

<!--more-->


<p>Hold the left mouse button to strafe.</p>

<script type="text/javascript">
    var path = '../../../../../blog_demos/';
</script>




<div id="demo" class="centre">
    <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Handlee">
    <script type="text/javascript" src="../../../../../blog_demos/libs/phaser.min.js"></script>
    <script type="text/javascript" src="../../../../../blog_demos/arena_shooter/Boot.js"></script>
    <script type="text/javascript" src="../../../../../blog_demos/arena_shooter/Preloader.js"></script>
    <script type="text/javascript" src="../../../../../blog_demos/arena_shooter/MonsterSpawner.js"></script>
    <script type="text/javascript" src="../../../../../blog_demos/arena_shooter/MainMenu.js"></script>
    <script type="text/javascript" src="../../../../../blog_demos/arena_shooter/Game.js"></script>
    
    <script type="text/javascript">
      
      window.onload = function() {

      
      //    Create your Phaser game and inject it into the gameContainer div.
      //    We did it in a window.onload event, but you can do it anywhere 
      // (requireJS load, anonymous function, jQuery dom ready, - whatever floats your boat)
      var game = new Phaser.Game(800, 600, Phaser.AUTO, "demo");
      
      //    Add the States your game has.

      game.state.add('Boot', ArenaShooter.Boot);
      game.state.add('Preloader', ArenaShooter.Preloader);
      game.state.add('MainMenu', ArenaShooter.MainMenu);
      game.state.add('Game', ArenaShooter.Game);

      //    Now start the Boot state.
      game.state.start('Boot');
      
      };
      
    </script>
</div>


<pre><br></pre>


<p>It still needs a lot of polish, but it&rsquo;s a good starting point for developing something more complex. Later on, when I have the time, I&rsquo;ll have a go at fleshing it out.  Give the monsters more of a bite, they&rsquo;re too easy to dodge at the moment. Monster bullets, levels, bosses, collectibles, player upgrades, sound &hellip; what else?</p>

<p>If you decide to take a peek at the <a href="https://github.com/rieya-uc/blog_demos">code</a>, you&rsquo;ll notice the sudden increase in .js files. I&rsquo;ve moved on to using Phaser&rsquo;s <a href="https://github.com/photonstorm/phaser/tree/master/resources/Project%20Templates">templates</a> as a way of organising my code. It sets everything up to load in stages, with space for a preloader bar and logo screen if needed. Useful for when my demos start getting bigger.</p>

<p>As an aside, here&rsquo;s the fun little game I shamelessly ripped my idea from, <a href="http://www.kongregate.com/games/GameReclaim/death-vs-monstars">Death Vs Monstars</a>. And of course, here&rsquo;s a link to my <a href="https://github.com/rieya-uc/blog_demos">code</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drag the Square]]></title>
    <link href="http://rieya-uc.github.io/blog/2014/06/11/drag-the-square/"/>
    <updated>2014-06-11T16:01:37+01:00</updated>
    <id>http://rieya-uc.github.io/blog/2014/06/11/drag-the-square</id>
    <content type="html"><![CDATA[<p>This one took somewhat longer than I expected. I wanted to create a collection of sprites that could be dragged around the screen as one.</p>

<p>Click the button to make a random rectangle appear somewhere on screen. Drag it around, then add a few more.</p>

<!--more-->


<script type="text/javascript">
    var path = '../../../../../blog_demos/';
</script>




<div id="demo" class="centre">

    <script type="text/javascript" src= "../../../../../blog_demos/libs/phaser.min.js"></script>
    <script type="text/javascript" src= "../../../../../blog_demos/drag_square/Square.js"></script>
    <script type="text/javascript" src= "../../../../../blog_demos/drag_square/drag_square.js"></script>
</div>


<pre><br></pre>


<p>The rectangle (Square.js), is made up of several sprites; its body and four borders. They are contained in an extended Phaser.Group (see <a href="http://examples.phaser.io/_site/view_full.html?d=groups&amp;f=extending+a+group.js&amp;t=extending%20a%20group">example</a>). Groups have no dimensions, which means no click area, and no drag event. Therefore to get the rectangle to move as one, I enabled drag on the body and kept the borders aligned during <code>update()</code>.</p>

<p>Everything inside a Group is moved relative to the Group&rsquo;s position. Don&rsquo;t do what I did and move the Group after the body&rsquo;s been dragged as an alternative to aligning the sprites individually, because you&rsquo;ll find the body has moved twice as far and your rectangle will be rectangular in name only. I found it simpler to keep all Groups at position (0,0), and position the sprites relative to that. The downside to doing it this way is that moving the Group via <code>(group.x, group.y) = some position</code> screws up the drag.</p>

<p>I think that if I were to redo this, I would forego drag altogether and use mousedown events instead, so that I could move the Group as a whole, and not the individual sprites.</p>

<p>Code? All available on <a href="https://github.com/rieya-uc/blog_demos">github</a>, and in the drag_square folder specifically.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roll the Dice]]></title>
    <link href="http://rieya-uc.github.io/blog/2014/06/03/roll-the-dice/"/>
    <updated>2014-06-03T14:22:18+01:00</updated>
    <id>http://rieya-uc.github.io/blog/2014/06/03/roll-the-dice</id>
    <content type="html"><![CDATA[<p>Things to do:</p>

<ul>
<li>Learn Javascript</li>
<li>Try out <a href="http://phaser.io/">Phaser</a></li>
<li>Get comfortable with putting stuff online</li>
</ul>


<p>To that end, here&rsquo;s something short I wrote to try out Phaser. Click the dice to make them roll.</p>

<!--more-->




<script type="text/javascript">
    var path = '../../../../../blog_demos/';
</script>




<div id="demo" class="centre">

    <script type="text/javascript" src= "../../../../../blog_demos/libs/phaser.min.js"></script>
    <script type="text/javascript" src= "../../../../../blog_demos/rolling_dice/Dice.js"></script>
    <script type="text/javascript" src= "../../../../../blog_demos/rolling_dice/rolling_dice.js"></script>
</div>


<pre><br></pre>


<p>To get the roll effect I used a blur filter in combination with spritesheet animation and random rotation. The dice extend Phaser.Sprite so that they can manage their own values. With all the <a href="http://examples.phaser.io/">examples</a> available on the Phaser website, it was fairly easy to work out what was needed (working out the intricacies of Javascript on the other hand&hellip;).</p>

<p>All the code is available on <a href="https://github.com/rieya-uc/blog_demos">github</a>, and in the rolling_dice folder specifically.</p>

<p>Where to now? A game of Yahtzee perhaps?</p>
]]></content>
  </entry>
  
</feed>
